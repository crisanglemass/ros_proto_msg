// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: publish_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_publish_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_publish_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_publish_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_publish_5finfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_publish_5finfo_2eproto;
namespace huizhang {
namespace sample {
class PublishInfo;
class PublishInfoDefaultTypeInternal;
extern PublishInfoDefaultTypeInternal _PublishInfo_default_instance_;
class date;
class dateDefaultTypeInternal;
extern dateDefaultTypeInternal _date_default_instance_;
class work;
class workDefaultTypeInternal;
extern workDefaultTypeInternal _work_default_instance_;
}  // namespace sample
}  // namespace huizhang
PROTOBUF_NAMESPACE_OPEN
template<> ::huizhang::sample::PublishInfo* Arena::CreateMaybeMessage<::huizhang::sample::PublishInfo>(Arena*);
template<> ::huizhang::sample::date* Arena::CreateMaybeMessage<::huizhang::sample::date>(Arena*);
template<> ::huizhang::sample::work* Arena::CreateMaybeMessage<::huizhang::sample::work>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace huizhang {
namespace sample {

// ===================================================================

class PublishInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:huizhang.sample.PublishInfo) */ {
 public:
  inline PublishInfo() : PublishInfo(nullptr) {}
  virtual ~PublishInfo();

  PublishInfo(const PublishInfo& from);
  PublishInfo(PublishInfo&& from) noexcept
    : PublishInfo() {
    *this = ::std::move(from);
  }

  inline PublishInfo& operator=(const PublishInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishInfo& operator=(PublishInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PublishInfo& default_instance();

  static inline const PublishInfo* internal_default_instance() {
    return reinterpret_cast<const PublishInfo*>(
               &_PublishInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PublishInfo& a, PublishInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PublishInfo* New() const final {
    return CreateMaybeMessage<PublishInfo>(nullptr);
  }

  PublishInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PublishInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PublishInfo& from);
  void MergeFrom(const PublishInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "huizhang.sample.PublishInfo";
  }
  protected:
  explicit PublishInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_publish_5finfo_2eproto);
    return ::descriptor_table_publish_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMessageTypeFieldNumber = 2,
    kPublishMsgFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string message_type = 2;
  void clear_message_type();
  const std::string& message_type() const;
  void set_message_type(const std::string& value);
  void set_message_type(std::string&& value);
  void set_message_type(const char* value);
  void set_message_type(const char* value, size_t size);
  std::string* mutable_message_type();
  std::string* release_message_type();
  void set_allocated_message_type(std::string* message_type);
  private:
  const std::string& _internal_message_type() const;
  void _internal_set_message_type(const std::string& value);
  std::string* _internal_mutable_message_type();
  public:

  // string publish_msg = 3;
  void clear_publish_msg();
  const std::string& publish_msg() const;
  void set_publish_msg(const std::string& value);
  void set_publish_msg(std::string&& value);
  void set_publish_msg(const char* value);
  void set_publish_msg(const char* value, size_t size);
  std::string* mutable_publish_msg();
  std::string* release_publish_msg();
  void set_allocated_publish_msg(std::string* publish_msg);
  private:
  const std::string& _internal_publish_msg() const;
  void _internal_set_publish_msg(const std::string& value);
  std::string* _internal_mutable_publish_msg();
  public:

  // @@protoc_insertion_point(class_scope:huizhang.sample.PublishInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr publish_msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_publish_5finfo_2eproto;
};
// -------------------------------------------------------------------

class work PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:huizhang.sample.work) */ {
 public:
  inline work() : work(nullptr) {}
  virtual ~work();

  work(const work& from);
  work(work&& from) noexcept
    : work() {
    *this = ::std::move(from);
  }

  inline work& operator=(const work& from) {
    CopyFrom(from);
    return *this;
  }
  inline work& operator=(work&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const work& default_instance();

  static inline const work* internal_default_instance() {
    return reinterpret_cast<const work*>(
               &_work_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(work& a, work& b) {
    a.Swap(&b);
  }
  inline void Swap(work* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(work* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline work* New() const final {
    return CreateMaybeMessage<work>(nullptr);
  }

  work* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<work>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const work& from);
  void MergeFrom(const work& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(work* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "huizhang.sample.work";
  }
  protected:
  explicit work(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_publish_5finfo_2eproto);
    return ::descriptor_table_publish_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:huizhang.sample.work)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_publish_5finfo_2eproto;
};
// -------------------------------------------------------------------

class date PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:huizhang.sample.date) */ {
 public:
  inline date() : date(nullptr) {}
  virtual ~date();

  date(const date& from);
  date(date&& from) noexcept
    : date() {
    *this = ::std::move(from);
  }

  inline date& operator=(const date& from) {
    CopyFrom(from);
    return *this;
  }
  inline date& operator=(date&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const date& default_instance();

  static inline const date* internal_default_instance() {
    return reinterpret_cast<const date*>(
               &_date_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(date& a, date& b) {
    a.Swap(&b);
  }
  inline void Swap(date* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(date* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline date* New() const final {
    return CreateMaybeMessage<date>(nullptr);
  }

  date* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<date>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const date& from);
  void MergeFrom(const date& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(date* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "huizhang.sample.date";
  }
  protected:
  explicit date(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_publish_5finfo_2eproto);
    return ::descriptor_table_publish_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:huizhang.sample.date)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_publish_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PublishInfo

// string name = 1;
inline void PublishInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& PublishInfo::name() const {
  // @@protoc_insertion_point(field_get:huizhang.sample.PublishInfo.name)
  return _internal_name();
}
inline void PublishInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:huizhang.sample.PublishInfo.name)
}
inline std::string* PublishInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:huizhang.sample.PublishInfo.name)
  return _internal_mutable_name();
}
inline const std::string& PublishInfo::_internal_name() const {
  return name_.Get();
}
inline void PublishInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PublishInfo::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:huizhang.sample.PublishInfo.name)
}
inline void PublishInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:huizhang.sample.PublishInfo.name)
}
inline void PublishInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:huizhang.sample.PublishInfo.name)
}
inline std::string* PublishInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PublishInfo::release_name() {
  // @@protoc_insertion_point(field_release:huizhang.sample.PublishInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublishInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:huizhang.sample.PublishInfo.name)
}

// string message_type = 2;
inline void PublishInfo::clear_message_type() {
  message_type_.ClearToEmpty();
}
inline const std::string& PublishInfo::message_type() const {
  // @@protoc_insertion_point(field_get:huizhang.sample.PublishInfo.message_type)
  return _internal_message_type();
}
inline void PublishInfo::set_message_type(const std::string& value) {
  _internal_set_message_type(value);
  // @@protoc_insertion_point(field_set:huizhang.sample.PublishInfo.message_type)
}
inline std::string* PublishInfo::mutable_message_type() {
  // @@protoc_insertion_point(field_mutable:huizhang.sample.PublishInfo.message_type)
  return _internal_mutable_message_type();
}
inline const std::string& PublishInfo::_internal_message_type() const {
  return message_type_.Get();
}
inline void PublishInfo::_internal_set_message_type(const std::string& value) {
  
  message_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PublishInfo::set_message_type(std::string&& value) {
  
  message_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:huizhang.sample.PublishInfo.message_type)
}
inline void PublishInfo::set_message_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:huizhang.sample.PublishInfo.message_type)
}
inline void PublishInfo::set_message_type(const char* value,
    size_t size) {
  
  message_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:huizhang.sample.PublishInfo.message_type)
}
inline std::string* PublishInfo::_internal_mutable_message_type() {
  
  return message_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PublishInfo::release_message_type() {
  // @@protoc_insertion_point(field_release:huizhang.sample.PublishInfo.message_type)
  return message_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublishInfo::set_allocated_message_type(std::string* message_type) {
  if (message_type != nullptr) {
    
  } else {
    
  }
  message_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:huizhang.sample.PublishInfo.message_type)
}

// string publish_msg = 3;
inline void PublishInfo::clear_publish_msg() {
  publish_msg_.ClearToEmpty();
}
inline const std::string& PublishInfo::publish_msg() const {
  // @@protoc_insertion_point(field_get:huizhang.sample.PublishInfo.publish_msg)
  return _internal_publish_msg();
}
inline void PublishInfo::set_publish_msg(const std::string& value) {
  _internal_set_publish_msg(value);
  // @@protoc_insertion_point(field_set:huizhang.sample.PublishInfo.publish_msg)
}
inline std::string* PublishInfo::mutable_publish_msg() {
  // @@protoc_insertion_point(field_mutable:huizhang.sample.PublishInfo.publish_msg)
  return _internal_mutable_publish_msg();
}
inline const std::string& PublishInfo::_internal_publish_msg() const {
  return publish_msg_.Get();
}
inline void PublishInfo::_internal_set_publish_msg(const std::string& value) {
  
  publish_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PublishInfo::set_publish_msg(std::string&& value) {
  
  publish_msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:huizhang.sample.PublishInfo.publish_msg)
}
inline void PublishInfo::set_publish_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  publish_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:huizhang.sample.PublishInfo.publish_msg)
}
inline void PublishInfo::set_publish_msg(const char* value,
    size_t size) {
  
  publish_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:huizhang.sample.PublishInfo.publish_msg)
}
inline std::string* PublishInfo::_internal_mutable_publish_msg() {
  
  return publish_msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PublishInfo::release_publish_msg() {
  // @@protoc_insertion_point(field_release:huizhang.sample.PublishInfo.publish_msg)
  return publish_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublishInfo::set_allocated_publish_msg(std::string* publish_msg) {
  if (publish_msg != nullptr) {
    
  } else {
    
  }
  publish_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), publish_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:huizhang.sample.PublishInfo.publish_msg)
}

// -------------------------------------------------------------------

// work

// -------------------------------------------------------------------

// date

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sample
}  // namespace huizhang

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_publish_5finfo_2eproto
